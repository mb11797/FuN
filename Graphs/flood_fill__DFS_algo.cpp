#include<iostream>
using namespace std;

/*
R=16, C=32
................................
.............#####..............
.............#...#..............
.......#######...#######........
.....####...#######...####......
....##...................##.....
...##.....................##....
...##.....................##....
....##...................##.....
.....##.................##......
......##...............##.......
.......###...........###........
.........#############..........
................................
...........A.P.P.L.E............
................................


R=20, C=32
................................
................................
.......#######...#######........
.....###....#######....###......
....##........###........##.....
...##..........#..........##....
...##.....................##....
....##...................##.....
.....##.................##......
......##...............##.......
.......##.............##........
........##...........##.........
.........##.........##..........
..........##.......##...........
...........##.....##............
............##...##.............
..............###...............
...............#................
...........H.E.A.R.T............
................................

*/
int R, C;

void print_matrix(char input[][50]){
    for(int i=0; i<R; i++){
        for(int j=0; j<C; j++)
            cout<<input[i][j];
        cout<<endl;
    }
    cout<<endl;
}

int dx[] = {-1, 0, 1, 0};
int dy[] = {0, -1, 0, 1};

//ch is the character to be replaced
//color is the character which is to be added
void flood_fill_dfs(char mat[][50], int i, int j, char ch, char color){
    //Base case - Matrix bounds
    if(i<0 || j<0 || i>=R || j>=C)
        return;

    //Figure boundary condition
    if(mat[i][j]!=ch)
        return;

    //our work in this call
    mat[i][j] = color;

    //recursive call
    for(int k=0; k<4; k++)
        flood_fill_dfs(mat, i+dx[k], j+dy[k], ch, color);

    return;
}


int main(){
    cin>>R>>C;

    char input[50][50];
    for(int i=0; i<R; i++)
        for(int j=0; j<C; j++)
            cin>>input[i][j];

    print_matrix(input);

    flood_fill_dfs(input, 9, 14, '.', 'r');
    flood_fill_dfs(input, 0, 0, '.', '!');

    print_matrix(input);


    return 0;
}
